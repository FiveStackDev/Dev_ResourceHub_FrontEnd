import React, { useState } from 'react';
import { SettingsLayout } from './SettingsLayout';
import { Input, Button } from './FormElements';
import { Shield, Smartphone, Key, History, QrCode } from 'lucide-react';
import { showSuccessToast, showErrorToast, showLoadingToast, dismissToast, ConfirmDialog } from './Feedback';

interface Session {
  id: string;
  device: string;
  location: string;
  lastActive: string;
  isCurrentSession: boolean;
}

interface TwoFactorState {
  isEnabled: boolean;
  qrCode: string | null;
  backupCodes: string[];
  verificationCode: string;
}

export const SecuritySettings = () => {
  const [sessions] = useState<Session[]>([
    {
      id: '1',
      device: 'Chrome on Windows',
      location: 'London, UK',
      lastActive: 'Active now',
      isCurrentSession: true,
    },
    {
      id: '2',
      device: 'Safari on iPhone',
      location: 'New York, USA',
      lastActive: '2 hours ago',
      isCurrentSession: false,
    },
  ]);

  const [showRevokeDialog, setShowRevokeDialog] = useState(false);
  const [selectedSession, setSelectedSession] = useState<string | null>(null);
  const [showTwoFactorSetup, setShowTwoFactorSetup] = useState(false);
  const [twoFactorState, setTwoFactorState] = useState<TwoFactorState>({
    isEnabled: false,
    qrCode: null,
    backupCodes: [],
    verificationCode: '',
  });

  const handleRevokeSession = async (sessionId: string) => {
    const loadingToast = showLoadingToast('Revoking session...', 'This may take a moment');
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      showSuccessToast('Session revoked successfully', 'The device has been logged out');
    } catch (error) {
      showErrorToast(
        'Failed to revoke session',
        'Please try again later. If the problem persists, contact support.'
      );
    } finally {
      dismissToast(loadingToast);
    }
  };

  const handleGenerateToken = async () => {
    const loadingToast = showLoadingToast('Generating API token...', 'This may take a moment');
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Generate a random token
      const token = Math.random().toString(36).substring(2) + 
                   Math.random().toString(36).substring(2);
      
      showSuccessToast(
        'API token generated successfully',
        'Your new token is: ' + token.substring(0, 8) + '...'
      );
    } catch (error) {
      showErrorToast(
        'Failed to generate token',
        'Please try again later. If the problem persists, contact support.'
      );
    } finally {
      dismissToast(loadingToast);
    }
  };

  const initiateTwoFactorSetup = async () => {
    const loadingToast = showLoadingToast('Setting up 2FA...', 'Generating QR code');

    try {
      // Simulate API call to get QR code and backup codes
      await new Promise(resolve => setTimeout(resolve, 2000));

      // In a real implementation, this would be generated by the backend
      const backupCodes = Array.from({ length: 8 }, () => 
        Math.random().toString(36).substring(2, 6).toUpperCase() +
        '-' +
        Math.random().toString(36).substring(2, 6).toUpperCase()
      );

      setTwoFactorState(prev => ({
        ...prev,
        qrCode: 'https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=otpauth://totp/Example:user@example.com?secret=JBSWY3DPEHPK3PXP&issuer=Example',
        backupCodes,
      }));

      setShowTwoFactorSetup(true);
    } catch (error) {
      showErrorToast(
        'Failed to setup 2FA',
        'Please try again later'
      );
    } finally {
      dismissToast(loadingToast);
    }
  };

  const verifyTwoFactorSetup = async () => {
    if (!twoFactorState.verificationCode) {
      showErrorToast('Verification required', 'Please enter the verification code');
      return;
    }

    const loadingToast = showLoadingToast('Verifying setup...', 'Please wait');

    try {
      // Simulate verification
      await new Promise(resolve => setTimeout(resolve, 1500));

      setTwoFactorState(prev => ({
        ...prev,
        isEnabled: true,
        verificationCode: '',
      }));
      setShowTwoFactorSetup(false);

      showSuccessToast(
        '2FA enabled successfully',
        'Your account is now more secure'
      );
    } catch (error) {
      showErrorToast(
        'Verification failed',
        'Please check the code and try again'
      );
    } finally {
      dismissToast(loadingToast);
    }
  };

  return (
    <SettingsLayout
      title="Security Settings"
      description="Manage your account security and active sessions"
    >
      <div className="space-y-8">
        <section>
          <div className="flex items-center gap-2 mb-4">
            <History className="w-5 h-5 text-gray-500" />
            <h3 className="text-lg font-medium">Login History</h3>
          </div>
          <div className="bg-gray-50 p-4 rounded-lg">
            <div className="space-y-4">
              {sessions.map((session) => (
                <div
                  key={session.id}
                  className="flex items-center justify-between bg-white p-4 rounded-lg shadow-sm"
                >
                  <div>
                    <h4 className="font-medium">{session.device}</h4>
                    <p className="text-sm text-gray-500">
                      {session.location} â€¢ {session.lastActive}
                    </p>
                  </div>
                  {!session.isCurrentSession && (
                    <Button
                      variant="danger"
                      onClick={() => {
                        setSelectedSession(session.id);
                        setShowRevokeDialog(true);
                      }}
                    >
                      Revoke Access
                    </Button>
                  )}
                </div>
              ))}
            </div>
          </div>
        </section>

        <section>
          <div className="flex items-center gap-2 mb-4">
            <QrCode className="w-5 h-5 text-gray-500" />
            <h3 className="text-lg font-medium">Two-Factor Authentication</h3>
          </div>
          <div className="bg-gray-50 p-4 rounded-lg">
            <p className="text-sm text-gray-600 mb-4">
              {twoFactorState.isEnabled
                ? 'Two-factor authentication is enabled. This adds an extra layer of security to your account.'
                : 'Enable two-factor authentication to add an extra layer of security to your account.'}
            </p>
            <Button
              onClick={twoFactorState.isEnabled ? () => {} : initiateTwoFactorSetup}
              variant={twoFactorState.isEnabled ? 'secondary' : 'primary'}
            >
              {twoFactorState.isEnabled ? 'Manage 2FA' : 'Enable 2FA'}
            </Button>
          </div>
        </section>

        <section>
          <div className="flex items-center gap-2 mb-4">
            <Key className="w-5 h-5 text-gray-500" />
            <h3 className="text-lg font-medium">API Access</h3>
          </div>
          <div className="bg-gray-50 p-4 rounded-lg">
            <p className="text-sm text-gray-600 mb-4">
              Generate and manage API tokens for third-party applications.
            </p>
            <Button onClick={handleGenerateToken}>
              Generate New Token
            </Button>
          </div>
        </section>

        <section>
          <div className="flex items-center gap-2 mb-4">
            <Shield className="w-5 h-5 text-gray-500" />
            <h3 className="text-lg font-medium">Security Questions</h3>
          </div>
          <div className="bg-gray-50 p-4 rounded-lg">
            <p className="text-sm text-gray-600 mb-4">
              Set up security questions to help protect your account.
            </p>
            <Button variant="secondary">
              Update Security Questions
            </Button>
          </div>
        </section>
      </div>

      <ConfirmDialog
        isOpen={showRevokeDialog}
        onClose={() => setShowRevokeDialog(false)}
        onConfirm={() => {
          if (selectedSession) {
            handleRevokeSession(selectedSession);
          }
          setShowRevokeDialog(false);
        }}
        title="Revoke Device Access"
        message="Are you sure you want to revoke access for this device? The user will be logged out immediately."
        confirmLabel="Yes, Revoke Access"
        cancelLabel="Cancel"
        type="danger"
      />

      <ConfirmDialog
        isOpen={showTwoFactorSetup}
        onClose={() => {
          setShowTwoFactorSetup(false);
          setTwoFactorState(prev => ({
            ...prev,
            verificationCode: '',
          }));
        }}
        onConfirm={verifyTwoFactorSetup}
        title="Set Up Two-Factor Authentication"
        message={
          <div className="space-y-6">
            <div>
              <h4 className="font-medium mb-2">1. Scan QR Code</h4>
              <p className="text-sm text-gray-600 mb-4">
                Scan this QR code with your authenticator app (e.g., Google Authenticator, Authy)
              </p>
              {twoFactorState.qrCode && (
                <div className="bg-white p-4 rounded-lg inline-block">
                  <img src={twoFactorState.qrCode} alt="2FA QR Code" className="w-48 h-48" />
                </div>
              )}
            </div>

            <div>
              <h4 className="font-medium mb-2">2. Save Backup Codes</h4>
              <p className="text-sm text-gray-600 mb-4">
                Store these backup codes in a safe place. You can use them to access your account if you lose your authenticator device.
              </p>
              <div className="grid grid-cols-2 gap-2">
                {twoFactorState.backupCodes.map((code, index) => (
                  <div key={index} className="bg-gray-100 p-2 rounded text-center font-mono text-sm">
                    {code}
                  </div>
                ))}
              </div>
            </div>

            <div>
              <h4 className="font-medium mb-2">3. Verify Setup</h4>
              <p className="text-sm text-gray-600 mb-4">
                Enter the verification code from your authenticator app to complete the setup
              </p>
              <Input
                type="text"
                label="Verification Code"
                id="verificationCode"
                value={twoFactorState.verificationCode}
                onChange={(e) => setTwoFactorState(prev => ({ ...prev, verificationCode: e.target.value }))}
                placeholder="Enter 6-digit code"
                required
              />
            </div>
          </div>
        }
        confirmLabel="Enable 2FA"
        cancelLabel="Cancel"
        type="info"
      />
    </SettingsLayout>
  );
};